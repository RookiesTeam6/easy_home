name: easy home

on:
  push:
    branches:
      - main
      - feat-gateway-deploy

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v2

      - name: JDK 17 버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 유레카 서버 권한
        working-directory: ./eureka-server
        run: chmod +x ./gradlew

      - name: 유레카 서버 빌드 / 클린
        working-directory: ./eureka-server
        run: |
          ./gradlew clean bootJar -x test
          ls build/libs  # 빌드된 .jar 파일 확인

      - name: API-GATEWAY 권한
        working-directory: ./api-gateway
        run: chmod +x ./gradlew

      - name: API Gateway 빌드 / 클린
        working-directory: ./api-gateway
        run: |
          ./gradlew clean build -x test
          ls build/libs  # 빌드된 .jar 파일 확인

      # 2. Eureka Server 배포
      - name: Run Eureka Server
        working-directory: ./eureka-server
        run: java -jar $(find build/libs -name '*SNAPSHOT.jar') &
        env:
          SECRET_KEY: ${{ secrets.RAW_SECRET_KEY }}  # 환경 변수 전달

      # 3. API Gateway 배포
      - name: Run API Gateway
        working-directory: ./api-gateway
        run: java -jar $(find build/libs -name '*SNAPSHOT.jar') &
        env:
          SECRET_KEY: ${{ secrets.RAW_SECRET_KEY }}  # 환경 변수 전달

      # 4. Docker 빌드 및 실행
      - name: Eureka Server 도커 실행
        working-directory: ./eureka-server
        run: |
          docker build -t eureka-server .
          docker run -d --name eureka-server -p 8761:8761 --env SECRET_KEY=${{ secrets.RAW_SECRET_KEY }} eureka-server
          docker ps -a  

      - name: API Gateway 도커 실행
        working-directory: ./api-gateway
        run: |
          docker build -t api-gateway .
          docker run -d --name api-gateway -p 8080:8080 --env SECRET_KEY=${{ secrets.RAW_SECRET_KEY }} api-gateway
          docker ps -a  


