spring.application.name=msa-sb-user
# \uBE48\uC758 \uC774\uB984\uC774 \uACB9\uCE58\uBA74 \uB098\uC911 \uAC83\uC744 \uCD5C\uC885\uC73C\uB85C \uC124\uC815
spring.main.allow-bean-definition-overriding=true 
# \uC11C\uBE44\uC2A4 \uD3EC\uD2B8 \uC124\uC815 : 8081
server.port=8081

# \uC720\uB808\uCE74 \uAD00\uB828 - MSA
eureka.client.service-url.defaultZone= http://localhost:8761/eureka
# \uC720\uB808\uCE74 \uC11C\uBC84\uC5D0 \uC11C\uBE44\uC2A4 \uB4F1\uB85D, \uD5EC\uC2DC\uCCB4\uD06C (\uACC4\uC18D \uC0B4\uC544 \uC788\uB294\uC9C0 \uCCB4\uD06C \uC8FC\uAE30 \uC9C0\uC815)
# \uCCB4\uD06C \uD6C4 \uD2B9\uC815 \uC2DC\uAC04\uB3D9\uC548 \uAC31\uC2E0\uC774 \uC548\uB418\uBA74, \uC720\uB808\uCE74 \uC11C\uBC84\uC5D0\uC11C \uC81C\uAC70 -> \uC81C\uD55C \uC2DC\uAC04 \uC9C0\uC815
# \uAE30\uBCF8 30\uCD08 -> 15\uCD08 \uC8FC\uAE30 \uC870\uC815 : \uD5EC\uC2A4 \uCCB4\uD06C
eureka.instance.lease-renewal-interval-in-seconds=15
# \uAE30\uBCF8 90\uCD08 -> 20\uCD08 \uC815\uB3C4 \uB300\uAE30
eureka.instance.lease-expiration-duration-in-seconds=20
# \uC720\uB808\uCE74 \uC11C\uBC84\uC5D0\uC11C \uC720\uB808\uCE74 \uD074\uB77C\uC774\uC5B8\uD2B8\uB97C \uB514\uC2A4\uCEE4\uBC84\uB9AC\uB97C \uC704\uD55C \uC124\uC815\uC740 \uAE30\uBCF8\uAC12 \uC720\uC9C0
#spring.cloud.compatibility-verifier.enabled=false
#eureka.client.register-with-eureka=true
#eureka.client.fetch-registry=true

# RDS - mysql
# MySQL \uC11C\uBC84\uC758 'easy_home_user' \uB370\uC774\uD130\uBCA0\uC774\uC2A4 \uC0AC\uC6A9
spring.datasource.url=jdbc:mysql://${MYSQL_HOST}:3306/easy_home_user
# MySQL JDBC \uB4DC\uB77C\uC774\uBC84 \uC9C0\uC815
spring.datasource.username=${MYSQL_USER}
spring.datasource.password=${MYSQL_PASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# \uC11C\uBE44\uC2A4(\uC560\uD50C\uB9AC\uCF00\uC774\uC158) \uC2E4\uD589 \uC2DC \uB370\uC774\uD130\uBCA0\uC774\uC2A4 \uCD08\uAE30\uD654 \uC2E4\uD589
spring.datasource.initialization-mode=always


# No-SQL - redis \uC5F0\uACB0
# Redis \uC11C\uBC84 \uD638\uC2A4\uD2B8 (\uB85C\uCEEC \uC2E4\uD589)
spring.data.redis.host=localhost
# Redis \uAE30\uBCF8 \uD3EC\uD2B8
spring.data.redis.port=6379
# Redis \uB9AC\uD3EC\uC9C0\uD1A0\uB9AC \uAE30\uB2A5 \uBE44\uD65C\uC131\uD654 (JPA\uC640 \uD568\uAED8 \uC0AC\uC6A9 \uC2DC \uD544\uC694 \uC5C6\uC74C)
spring.data.redis.repositories.enabled=false


# JPA
# Hibernate \uC790\uB3D9 \uD14C\uC774\uBE14 \uC0DD\uC131 \uC804\uB7B5 (update: \uAE30\uC874 \uB370\uC774\uD130 \uC720\uC9C0\uD558\uBA74\uC11C \uC2A4\uD0A4\uB9C8 \uC5C5\uB370\uC774\uD2B8)
spring.jpa.hibernate.ddl-auto=update
# SQL \uC2E4\uD589\uBB38 \uBCF4\uAE30 \uC27D\uAC8C \uD3EC\uB9F7\uD305
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.show-sql=true


# JWT - access/refresh \uD1A0\uD070 \uC0DD\uC131 -> \uB9CC\uB8CC\uC2DC\uAC04, \uC2DC\uD06C\uB9BF\uD0A4(\uAC8C\uC774\uD2B8\uC6E8\uC774\uC640 \uB3D9\uC77C) -> \uAD00\uB9AC \uACE0\uB824
jwt.token.raw_secret_key=${JWT_SECRET_KEY}
# access token \uB9CC\uB8CC\uC2DC\uAC04 -> 1\uC77C
# 3600\uCD08 = 60\uBD84 = 1\uC2DC\uAC04 \u2192 \uBC00\uB9AC\uCD08 \uB2E8\uC704\uB85C \uBCC0\uD658 (1\uC2DC\uAC04 = 3600000ms)
# 1\uC77C = 24\uC2DC\uAC04 * 60\uBD84 (1\uC77C = 86400000ms)
jwt.access-token-expiration=86400000
# 7\uC77C = 7 * 24\uC2DC\uAC04 \u2192 \uBC00\uB9AC\uCD08 \uB2E8\uC704 \uBCC0\uD658 (7\uC77C = 604800000ms)
jwt.refresh-token-expiration=604800000

# \uC778\uC99D \uC774\uBA54\uC77C \uBC1C\uC1A1
# \uAD6C\uAE00 -> \uBCF4\uC548 -> 2\uB2E8\uACC4 \uC778\uC99D\uAE4C\uC9C0 \uC644\uB8CC(\uD544\uC218\uC870\uAC74)\uB41C \uC0AC\uC6A9\uC790 \uB300\uC0C1 -> \uC571 \uBE44\uBC00\uBC88\uD638 \uAC80\uC0C9
# \uC571 \uC774\uB984 \uBD80\uC5EC -> \uC0DD\uC131 -> \uBE44\uBC88 \uC0DD\uC131\uB428
# SMTP \uC11C\uBC84 \uC124\uC815 (Gmail \uC0AC\uC6A9)
spring.mail.host=smtp.gmail.com
spring.mail.port=587
# \uC774\uBA54\uC77C \uBC1C\uC1A1\uC744 \uC704\uD55C \uACC4\uC815 \uC815\uBCF4
# \uBCF4\uC548\uC0C1 \uD658\uACBD \uBCC0\uC218\uB85C \uAD00\uB9AC\uD558\uAC70\uB098 application.yml\uC5D0\uC11C ENC() \uC554\uD638\uD654\uB97C \uC0AC\uC6A9\uD558\uB294 \uAC83\uC774 \uAD8C\uC7A5\uB428
spring.mail.username=${EMAIL_USERNAME}
# Gmail \uC571 \uBE44\uBC00\uBC88\uD638 (\uC808\uB300 GitHub\uC5D0 \uC62C\uB9AC\uC9C0 \uB9C8\uC138\uC694!)
spring.mail.password=${EMAIL_PASSWORD}
# SMTP \uC778\uC99D \uBC0F \uBCF4\uC548 \uC124\uC815
# \uC778\uC99D \uD65C\uC131\uD654
spring.mail.properties.mail.smtp.auth=true
# SMTP \uD0C0\uC784\uC544\uC6C3 (5\uCD08)
spring.mail.properties.mail.smtp.timeout=5000
# STARTTLS \uC0AC\uC6A9 (\uBCF4\uC548 \uC5F0\uACB0)
spring.mail.properties.mail.smtp.starttls.enable=true

# \uD658\uACBD \uBCC0\uC218 \uD30C\uC77C import
spring.config.import=optional:classpath:secret.properties

# kafka
# Kafka \uC11C\uBC84 \uC8FC\uC18C \uC124\uC815 (\uAE30\uBCF8\uC801\uC73C\uB85C \uB85C\uCEEC\uC5D0\uC11C \uC2E4\uD589\uB418\uB294 Kafka \uBE0C\uB85C\uCEE4 \uC0AC\uC6A9)
spring.kafka.bootstrap-servers=localhost:9092
# Kafka Producer \uC124\uC815 (\uBA54\uC2DC\uC9C0 \uC0DD\uC0B0\uC790)
# Producer\uAC00 \uBA54\uC2DC\uC9C0\uB97C \uC804\uC1A1\uD560 \uB54C, Key \uAC12\uC744 \uBB38\uC790\uC5F4\uB85C \uC9C1\uB82C\uD654
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# Producer\uAC00 \uBA54\uC2DC\uC9C0\uB97C \uC804\uC1A1\uD560 \uB54C, Value \uAC12\uC744 \uBB38\uC790\uC5F4\uB85C \uC9C1\uB82C\uD654
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# Kafka Consumer \uC124\uC815 (\uBA54\uC2DC\uC9C0 \uC18C\uBE44\uC790)
# Consumer\uAC00 \uBA54\uC2DC\uC9C0\uB97C \uBC1B\uC744 \uB54C, Key \uAC12\uC744 \uBB38\uC790\uC5F4\uB85C \uC5ED\uC9C1\uB82C\uD654
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# Consumer\uAC00 \uBA54\uC2DC\uC9C0\uB97C \uBC1B\uC744 \uB54C, Value \uAC12\uC744 \uBB38\uC790\uC5F4\uB85C \uC5ED\uC9C1\uB82C\uD654
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# Consumer\uAC00 \uC0C8\uB85C \uC2DC\uC791\uD560 \uB54C, \uCC98\uB9AC\uD560 \uC624\uD504\uC14B(Offset) \uC124\uC815
# earliest: \uAC00\uC7A5 \uCC98\uC74C\uBD80\uD130 \uC77D\uC74C (\uAE30\uC874 \uBA54\uC2DC\uC9C0\uB3C4 \uD3EC\uD568) <-> latest: \uC0C8\uB85C \uB4E4\uC5B4\uC628 \uBA54\uC2DC\uC9C0\uB9CC \uC77D\uC74C
spring.kafka.consumer.auto-offset-reset=earliest
# Consumer Group ID \uC124\uC815 (\uC5EC\uB7EC Consumer\uAC00 \uB3D9\uC77C\uD55C Group ID\uB97C \uAC00\uC9C0\uBA74 \uBA54\uC2DC\uC9C0\uB97C \uB098\uB220\uC11C \uCC98\uB9AC)
spring.kafka.consumer.group-id=test-group
# Consumer\uAC00 \uAD6C\uB3C5\uD558\uB294 Topic\uC774 \uC874\uC7AC\uD558\uC9C0 \uC54A\uC544\uB3C4 \uC560\uD50C\uB9AC\uCF00\uC774\uC158 \uC2E4\uD589\uC744 \uACC4\uC18D\uD558\uB3C4\uB85D \uC124\uC815
# (true\uB85C \uD558\uBA74 \uC5C6\uB294 Topic \uB54C\uBB38\uC5D0 \uC560\uD50C\uB9AC\uCF00\uC774\uC158\uC774 \uC885\uB8CC\uB420 \uC218 \uC788\uC74C)
spring.kafka.listener.missing-topics-fatal=false
